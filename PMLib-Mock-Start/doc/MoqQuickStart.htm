<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html><head>

 
 
 


 <script type="text/javascript">
 
 (function(){
function a(c){this.t={};this.tick=function(d,g,b){var e=b?b:(new Date).getTime();this.t[d]=e};this.tick("start",null,c)}var f=new a;window.jstiming={Timer:a,load:f};try{window.jstiming.pt=window.external.pageT}catch(h){};
})();

 
 
 
 var codesite_token = "6a3eff9819faa1bafda5a175331f13f0";
 
 </script>
 <title>QuickStart - 
 moq -
 
 Google Code</title>
 <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
 
 <link type="text/css" rel="stylesheet" href="QuickStart_files/ph_core.css">
 
 <link type="text/css" rel="stylesheet" href="QuickStart_files/ph_detail.css">
 
 
 
 
<!--[if IE]>
 <link type="text/css" rel="stylesheet" href="http://www.gstatic.com/codesite/ph/14923176398907059940/css/d_ie.css" >
<![endif]-->
<script type="text/javascript" src="QuickStart_files/ga.js"></script></head><body class="t6">
 <div id="gaia">
 
 <span>
 
 <b>petter@wigle.se</b>
 
 | <a href="http://code.google.com/p/support/wiki/WhatsNew?source=gb" style="color: rgb(170, 0, 51);" onclick="_CS_click('/gb/ph/whatsnew');">What's new?</a>
 | <a href="http://code.google.com/u/@VxdQRlBQAxRAWwR9/?source=gb" onclick="_CS_click('/gb/ph/profile');">Profile</a>
 
 | <a href="http://code.google.com/u/@VxdQRlBQAxRAWwR9/?source=gb" id="projects-dropdown" onclick="return false;">My projects</a><img src="QuickStart_files/cleardot.gif" class="menuIcon off instance0" height="14" width="14">
 
 | <a href="http://code.google.com/hosting/settings?source=gb" onclick="_CS_click('/gb/ph/settings');">Settings</a>
 | <a href="http://code.google.com/p/support/?source=gb" onclick="_CS_click('/gb/ph/help');">Help</a>
 | <a href="http://www.google.com/accounts/Logout?continue=http%3A%2F%2Fcode.google.com%2Fp%2Fmoq%2Fwiki%2FQuickStart" onclick="_CS_click('/gb/ph/signout');">Sign out</a>
 
 </span>

 </div>
 <div class="gbh" style="left: 0pt;"></div>
 <div class="gbh" style="right: 0pt;"></div>
 
 
 <div style="height: 1px;"></div>
 <table style="margin: 20px 0px 0px; padding: 0px; width: 100%;" cellpadding="0" cellspacing="0">
 <tbody><tr style="height: 58px;">
 <td style="width: 55px; text-align: center;">
 <a href="http://code.google.com/p/moq/">
 
 
 
 <img src="QuickStart_files/logo.png" alt="Logo">
 
 
 </a>
 </td>
 <td style="padding-left: 0.8em;">
 
 <div id="pname" style="margin: 0px 0px -3px;">
 <a href="http://code.google.com/p/moq/" style="text-decoration: none; color: rgb(0, 0, 0);">moq</a>
 </div>
 <div id="psum">
 <i><a id="project_summary_link" href="http://code.google.com/p/moq/" style="text-decoration: none; color: rgb(0, 0, 0);">The simplest mocking library for .NET 3.5 and Silverlight with deep C# 3.0 integration</a></i>
 </div>
 
 </td>
 <td style="white-space: nowrap; text-align: right;">
 
 <form action="/hosting/search">
 <input size="30" name="q" value="">
 <input name="projectsearch" value="Search projects" type="submit">
 </form>
 
 </td></tr>
 </tbody></table>


<table id="mt" border="0" cellpadding="0" cellspacing="0" width="100%">
 <tbody><tr>
 <th onclick="if (!cancelBubble) _go('/p/moq/');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/moq/">Project&nbsp;Home</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/moq/downloads/list');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/moq/downloads/list">Downloads</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/moq/w/list');">
 <div class="tab active">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/moq/w/list">Wiki</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/moq/issues/list');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/moq/issues/list">Issues</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 
 
 
 <th onclick="if (!cancelBubble) _go('/p/moq/source/checkout');">
 <div class="tab inactive">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <a onclick="cancelBubble=true;" href="http://code.google.com/p/moq/source/checkout">Source</a>
 </div>
 </div>
 </th><td>&nbsp;&nbsp;</td>
 
 
 <td width="100%">&nbsp;</td>
 </tr>
</tbody></table>
<table class="st" align="center" border="0" cellpadding="0" cellspacing="0" width="100%">
 <tbody><tr>
 
 
 
 <td>
 <div class="issueDetail">
<div class="isf">
 
 <span class="inIssueList"> 
 <span>Search</span>
 <form action="/p/moq/w/list" method="get" style="display: inline;">
 <select id="can" name="can" style="font-size: 92%;">
 <option disabled="disabled">Search within:</option>
 
 <option value="1">&nbsp;All wiki pages</option>
 <option value="3">&nbsp;Featured pages</option>
 <option value="2" selected="selected">&nbsp;Current pages</option>
 
 
 <option value="4">&nbsp;Deprecated pages</option>
 
 </select>
 <span>for</span>
 <input size="32" id="q" name="q" value="" style="font-size: 92%;" type="text">
 
 
 <input value="Search" style="font-size: 92%;" type="submit">
 </form>
 </span>

 
 
 
 
 
 
 

</div>
</div>

 </td>
 
 
 
 
 
 
 
 
 <td class="bevel-right" align="right" height="4" valign="top">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 </td>
 </tr>
</tbody></table>
<script type="text/javascript">
 var cancelBubble = false;
 function _go(url) { document.location = url; }
</script>

<div id="maincol">

 
<!-- IE -->






 <style type="text/css">
 .artifactcomment, #commentform {
 margin: .5em 0 0 0;
 padding: .3em 0 .3em .3em;
 border-top: 3px solid #c3d9ff;
 }
 #commentform { padding-top: 1em; }
 .delcom { background: #e8e8e8 }
 .commentcontent { margin: 1em 0;}
 </style>


 <div id="wikicontent">
 <table border="0" cellpadding="0" cellspacing="0" width="100%">
 <tbody><tr>
 
 <td class="vt" id="wikimaincol" width="100%">
 
 <div style="float: right; width: 18em;" id="wikimeta">
 <div class="pmeta_bubble_bg">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner">
 <table style="padding: 5px;">
 <tbody><tr><td colspan="2" style="padding-bottom: 5px;">Updated <span title="Thu Apr 16 06:45:05 2009">Apr 16 (3 days ago)</span>
 
 by <a style="white-space: nowrap;" href="http://code.google.com/u/kzu.net/">kzu.net</a>
 </td></tr>
 
 <tr><th class="vt">Labels:</th>
 <td>
 
 <a href="http://code.google.com/p/moq/w/list?q=label:Featured" title="">Featured</a>
 
 </td>
 </tr>
 
 
 
 </tbody></table>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
 </div>
 </div>
 
 <div id="wikiheader" style="margin-bottom: 1em;">
 
 <span style="font-size: 120%; font-weight: bold;">QuickStart</span>
 &nbsp;
 
 
 </div>
 <h1><a name="Introduction_to_Moq">Introduction to Moq</a></h1><p><a name="Introduction_to_Moq">Moq
is intended to be simple to use, strong typed (no magic strings!, and
therefore full compiler-verified and refactoring-friendly) and
minimalistic (while still fully functional!). </a></p><h2><a name="Methods">Methods</a></h2><pre class="prettyprint"><a name="Methods"><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;();</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">)).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// out arguments</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> outString </span><span class="pun">=</span><span class="pln"> </span><span class="str">"ack"</span><span class="pun">;</span><span class="pln"><br></span><span class="com">// TryParse will return true, and the out argument will return "ack", lazy evaluated</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">TryParse</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">out</span><span class="pln"> outString</span><span class="pun">)).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// ref arguments</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> instance </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Bar</span><span class="pun">();</span><span class="pln"><br></span><span class="com">// Only matches if the ref argument to the invocation is the same instance</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Submit</span><span class="pun">(</span><span class="kwd">ref</span><span class="pln"> instance</span><span class="pun">)).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// access invocation arguments when returning a value</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="typ">It</span><span class="pun">.</span><span class="typ">IsAny</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">&gt;()))</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">((</span><span class="kwd">string</span><span class="pln"> s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">ToLower</span><span class="pun">());</span><span class="pln"><br></span><span class="com">// Multiple parameters overloads available</span><span class="pln"><br><br><br></span><span class="com">// throwing when invoked</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"reset"</span><span class="pun">)).</span><span class="typ">Throws</span><span class="pun">&lt;</span><span class="typ">InvalidOperationException</span><span class="pun">&gt;();</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">""</span><span class="pun">)).</span><span class="typ">Throws</span><span class="pun">(</span><span class="kwd">new</span><span class="pln"> </span><span class="typ">ArgumentException</span><span class="pun">(</span><span class="str">"command"</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// lazy evaluating return value</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Count</span><span class="pun">()).</span><span class="typ">Returns</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> count</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// returning different values on each invocation</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;();</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> calls </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">))</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> calls</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Callback</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> calls</span><span class="pun">++);</span><span class="pln"><br></span><span class="com">// returns 0 on first invocation, 1 on the next, and so on</span><span class="pln"><br></span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="pln">mock</span><span class="pun">.</span><span class="typ">Object</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">));</span><span class="pln"><br></span></a></pre><h2><a name="Matching_Arguments">Matching Arguments</a></h2><pre class="prettyprint"><a name="Matching_Arguments"><span class="com">// any value</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="typ">It</span><span class="pun">.</span><span class="typ">IsAny</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">&gt;())).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// matching Func&lt;int&gt;, lazy evaluated</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="typ">It</span><span class="pun">.</span><span class="typ">Is</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">&gt;(</span><span class="pln">i </span><span class="pun">=&gt;</span><span class="pln"> i </span><span class="pun">%</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">))).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"> <br><br><br></span><span class="com">// matching ranges</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="typ">It</span><span class="pun">.</span><span class="typ">IsInRange</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">&gt;(</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Range</span><span class="pun">.</span><span class="typ">Inclusive</span><span class="pun">))).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"> <br><br><br></span><span class="com">// matching regex</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">x </span><span class="pun">=&gt;</span><span class="pln"> x</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="typ">It</span><span class="pun">.</span><span class="typ">IsRegex</span><span class="pun">(</span><span class="str">"[a-d]+"</span><span class="pun">,</span><span class="pln"> </span><span class="typ">RegexOptions</span><span class="pun">.</span><span class="typ">IgnoreCase</span><span class="pun">))).</span><span class="typ">Returns</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">);</span></a></pre><h2><a name="Properties">Properties</a></h2><pre class="prettyprint"><a name="Properties"><span class="pln">mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">).</span><span class="typ">Returns</span><span class="pun">(</span><span class="str">"bar"</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// auto-mocking hierarchies (a.k.a. recursive mocks)</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Bar</span><span class="pun">.</span><span class="typ">Baz</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">).</span><span class="typ">Returns</span><span class="pun">(</span><span class="str">"baz"</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// expects an invocation to set the value to "foo"</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">SetupSet</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"foo"</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// or verify the setter directly</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">VerifySet</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"foo"</span><span class="pun">);</span></a></pre><ul><li><a name="Properties">Setup a property so that it will automatically start tracking its value (also known as Stub): </a></li><pre class="prettyprint"><a name="Properties"><span class="com">// start "tracking" sets/gets to this property</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">SetupProperty</span><span class="pun">(</span><span class="pln">f </span><span class="pun">=&gt;</span><span class="pln"> f</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// alternatively, provide a default value for the stubbed property</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">SetupProperty</span><span class="pun">(</span><span class="pln">f </span><span class="pun">=&gt;</span><span class="pln"> f</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">,</span><span class="pln"> </span><span class="str">"foo"</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// Now you can do:</span><span class="pln"><br><br></span><span class="typ">IFoo</span><span class="pln"> foo </span><span class="pun">=</span><span class="pln"> mock</span><span class="pun">.</span><span class="typ">Object</span><span class="pun">;</span><span class="pln"><br></span><span class="com">// Initial value was stored</span><span class="pln"><br></span><span class="typ">Assert</span><span class="pun">.</span><span class="typ">Equal</span><span class="pun">(</span><span class="str">"foo"</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// New value set which changes the initial value</span><span class="pln"><br>foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="str">"bar"</span><span class="pun">;</span><span class="pln"><br></span><span class="typ">Assert</span><span class="pun">.</span><span class="typ">Equal</span><span class="pun">(</span><span class="str">"bar"</span><span class="pun">,</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">);</span></a></pre></ul><ul><li><a name="Properties">Stub all properties on a mock (not available on Silverlight): </a></li><pre class="prettyprint"><a name="Properties"><span class="pln">mock</span><span class="pun">.</span><span class="typ">SetupAllProperties</span><span class="pun">();</span></a></pre></ul><h2><a name="Events">Events</a></h2><pre class="prettyprint"><a name="Events"><span class="com">// Raising an event on the mock</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Raise</span><span class="pun">(</span><span class="pln">m </span><span class="pun">=&gt;</span><span class="pln"> m</span><span class="pun">.</span><span class="typ">FooEvent</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FooEventArgs</span><span class="pun">(</span><span class="pln">fooValue</span><span class="pun">));</span><span class="pln"><br><br></span><span class="com">// Raising an event on a descendant down the hierarchy</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Raise</span><span class="pun">(</span><span class="pln">m </span><span class="pun">=&gt;</span><span class="pln"> m</span><span class="pun">.</span><span class="typ">Child</span><span class="pun">.</span><span class="typ">First</span><span class="pun">.</span><span class="typ">FooEvent</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">FooEventArgs</span><span class="pun">(</span><span class="pln">fooValue</span><span class="pun">));</span><span class="pln"><br><br></span><span class="com">// Causing an event to raise automatically when Submit is invoked</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Submit</span><span class="pun">()).</span><span class="typ">Raises</span><span class="pun">(</span><span class="pln">f </span><span class="pun">=&gt;</span><span class="pln"> f</span><span class="pun">.</span><span class="typ">Sent</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="typ">EventArgs</span><span class="pun">.</span><span class="typ">Empty</span><span class="pun">);</span><span class="pln"><br></span><span class="com">// The raised event would trigger behavior on the object under test, which </span><span class="pln"><br></span><span class="com">// you would make assertions about later (how its state changed as a consequence, typically)</span><span class="pln"><br><br></span><span class="com">// Raising a custom event which does not adhere to the EventHandler pattern</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">delegate</span><span class="pln"> </span><span class="kwd">void</span><span class="pln"> </span><span class="typ">MyEventHandler</span><span class="pun">(</span><span class="kwd">int</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> b</span><span class="pun">);</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">interface</span><span class="pln"> </span><span class="typ">IFoo</span><span class="pln"><br></span><span class="pun">{</span><span class="pln"><br>&nbsp; </span><span class="kwd">event</span><span class="pln"> </span><span class="typ">MyEventHandler</span><span class="pln"> </span><span class="typ">MyEvent</span><span class="pun">;</span><span class="pln"> <br></span><span class="pun">}</span><span class="pln"><br><br></span><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;();</span><span class="pln"><br></span><span class="pun">...</span><span class="pln"><br></span><span class="com">// Raise passing the custom arguments expected by the event delegate</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Raise</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">MyEvent</span><span class="pln"> </span><span class="pun">+=</span><span class="pln"> </span><span class="kwd">null</span><span class="pun">,</span><span class="pln"> </span><span class="lit">25</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span><span class="pun">);</span></a></pre><h2><a name="Callbacks">Callbacks</a></h2><pre class="prettyprint"><a name="Callbacks"><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;();</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">))</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Callback</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> calls</span><span class="pun">++);</span><span class="pln"><br><br><br></span><span class="com">// access invocation arguments</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="typ">It</span><span class="pun">.</span><span class="typ">IsAny</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">&gt;()))</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Callback</span><span class="pun">((</span><span class="kwd">string</span><span class="pln"> s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> calls</span><span class="pun">.</span><span class="typ">Add</span><span class="pun">(</span><span class="pln">s</span><span class="pun">));</span><span class="pln"><br><br><br></span><span class="com">// callbacks can be specified before and after invocation</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">))</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Callback</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"Before returns"</span><span class="pun">))</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Callback</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="typ">Console</span><span class="pun">.</span><span class="typ">WriteLine</span><span class="pun">(</span><span class="str">"After returns"</span><span class="pun">));</span></a></pre><h2><a name="Verification">Verification</a></h2><pre class="prettyprint"><a name="Verification"><span class="pln">mock</span><span class="pun">.</span><span class="typ">Verify</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">));</span><span class="pln"><br><br></span><span class="com">// Verify with custom error message for failure</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Verify</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">),</span><span class="pln"> </span><span class="str">"When doing operation X, the service should be pinged always"</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// Method should never be called</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Verify</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Times</span><span class="pun">.</span><span class="typ">Never</span><span class="pun">());</span><span class="pln"><br><br></span><span class="com">// Called at least once</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Verify</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Execute</span><span class="pun">(</span><span class="str">"ping"</span><span class="pun">),</span><span class="pln"> </span><span class="typ">Times</span><span class="pun">.</span><span class="typ">AtLeastOnce</span><span class="pun">());</span><span class="pln"><br><br>mock</span><span class="pun">.</span><span class="typ">VerifyGet</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// Verify setter invocation, regardless of value.</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">VerifySet</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// Verify setter called with specific value</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">VerifySet</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Name</span><span class="pln"> </span><span class="pun">=</span><span class="str">"foo"</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// Verify setter with an argument matcher</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">VerifySet</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Value</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">It</span><span class="pun">.</span><span class="typ">IsInRange</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Range</span><span class="pun">.</span><span class="typ">Inclusive</span><span class="pun">));</span><span class="pln"><br></span></a></pre><h2><a name="Customizing_Mock_Behavior">Customizing Mock Behavior</a></h2><ul><li><a name="Customizing_Mock_Behavior">Make
mock behave like a "true Mock", raising exceptions for anything that
doesn't have a corresponding expectation: in Moq slang a "Strict" mock;
default behavior is "Loose" mock, which never throws and returns
default values or empty arrays, enumerables, etc. if no expectation is
set for a member </a></li><pre class="prettyprint"><a name="Customizing_Mock_Behavior"><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;(</span><span class="typ">MockBehavior</span><span class="pun">.</span><span class="typ">Strict</span><span class="pun">);</span></a></pre></ul><ul><li><a name="Customizing_Mock_Behavior">Invoke
base class implementation if no expectation overrides the member
(a.k.a. "Partial Mocks" in Rhino Mocks): default is false. (<strong>this is required if you are mocking Web/Html controls in System.Web!</strong>) </a></li><pre class="prettyprint"><a name="Customizing_Mock_Behavior"><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">CallBase</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">};</span></a></pre></ul><ul><li><a name="Customizing_Mock_Behavior">Make
an automatic recursive mock: a mock that will return a new mock for
every member that doesn't have an expectation and whose return value
can be mocked (i.e. it is not a value type) </a></li><pre class="prettyprint"><a name="Customizing_Mock_Behavior"><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">DefaultValue</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DefaultValue</span><span class="pun">.</span><span class="typ">Mock</span><span class="pln"> </span><span class="pun">};</span><span class="pln"><br></span><span class="com">// default is DefaultValue.Empty</span><span class="pln"><br><br></span><span class="com">// this property access would return a new mock of IBar as it's "mock-able"</span><span class="pln"><br></span><span class="typ">IBar</span><span class="pln"> value </span><span class="pun">=</span><span class="pln"> mock</span><span class="pun">.</span><span class="typ">Object</span><span class="pun">.</span><span class="typ">Bar</span><span class="pun">;</span><span class="pln"><br><br></span><span class="com">// the returned mock is reused, so further accesses to the property return </span><span class="pln"><br></span><span class="com">// the same mock instance. this allows us to also use this instance to </span><span class="pln"><br></span><span class="com">// set further expectations on it if we want</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> barMock </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">.</span><span class="typ">Get</span><span class="pun">(</span><span class="pln">value</span><span class="pun">);</span><span class="pln"><br>barMock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">b </span><span class="pun">=&gt;</span><span class="pln"> b</span><span class="pun">.</span><span class="typ">Submit</span><span class="pun">()).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></a></pre></ul><ul><li><a name="Customizing_Mock_Behavior">Centralizing
mock instance creation and management: you can create and verify all
mocks in a single place by using a MockFactory, which allows setting
the MockBehavior, its CallBase and DefaultValue consistently </a></li><pre class="prettyprint"><a name="Customizing_Mock_Behavior"><span class="kwd">var</span><span class="pln"> factory </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">MockFactory</span><span class="pun">(</span><span class="typ">MockBehavior</span><span class="pun">.</span><span class="typ">Strict</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span><span class="pln"> </span><span class="typ">DefaultValue</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="typ">DefaultValue</span><span class="pun">.</span><span class="typ">Mock</span><span class="pln"> </span><span class="pun">};</span><span class="pln"><br><br></span><span class="com">// Create a mock using the factory settings</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> fooMock </span><span class="pun">=</span><span class="pln"> factory</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;();</span><span class="pln"><br><br></span><span class="com">// Create a mock overriding the factory settings</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> barMock </span><span class="pun">=</span><span class="pln"> factory</span><span class="pun">.</span><span class="typ">Create</span><span class="pun">&lt;</span><span class="typ">IBar</span><span class="pun">&gt;(</span><span class="typ">MockBehavior</span><span class="pun">.</span><span class="typ">Loose</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// Verify all verifiable expectations on all mocks created through the factory</span><span class="pln"><br>factory</span><span class="pun">.</span><span class="typ">Verify</span><span class="pun">();</span></a></pre></ul><h2><a name="Miscellaneous">Miscellaneous</a></h2><ul><li><a name="Miscellaneous">Setting
expectations for protected members (you can't get intellisense for
these, so you access them using the member name as a string): </a></li><pre class="prettyprint"><a name="Miscellaneous"><span class="com">// at the top of the test fixture</span><span class="pln"><br></span><span class="kwd">using</span><span class="pln"> </span><span class="typ">Moq</span><span class="pun">.</span><span class="typ">Protected</span><span class="pun">()</span><span class="pln"><br><br></span><span class="com">// in the test</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> mock </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">CommandBase</span><span class="pun">&gt;();</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Protected</span><span class="pun">()</span><span class="pln"><br>&nbsp; &nbsp; &nbsp;</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">&lt;</span><span class="kwd">int</span><span class="pun">&gt;(</span><span class="str">"Execute"</span><span class="pun">)</span><span class="pln"><br>&nbsp; &nbsp; &nbsp;</span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">(</span><span class="lit">5</span><span class="pun">);</span><span class="pln"><br><br></span><span class="com">// if you need argument matching, you MUST use ItExpr rather than It</span><span class="pln"><br></span><span class="com">// planning on improving this for vNext</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Protected</span><span class="pun">()</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">&gt;(</span><span class="str">"Execute"</span><span class="pun">,</span><span class="pln"><br>&nbsp; &nbsp; &nbsp; &nbsp; </span><span class="typ">ItExpr</span><span class="pun">.</span><span class="typ">IsAny</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">&gt;())</span><span class="pln"><br>&nbsp; &nbsp; </span><span class="pun">.</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span></a></pre></ul><h2><a name="Advanced_Features">Advanced Features</a></h2><pre class="prettyprint"><a name="Advanced_Features"><span class="com">// get mock from a mocked instance</span><span class="pln"><br></span><span class="typ">IFoo</span><span class="pln"> foo </span><span class="pun">=</span><span class="pln"> </span><span class="com">// get mock instance somehow</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> fooMock </span><span class="pun">=</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">.</span><span class="typ">Get</span><span class="pun">(</span><span class="pln">foo</span><span class="pun">);</span><span class="pln"><br>fooMock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">f </span><span class="pun">=&gt;</span><span class="pln"> f</span><span class="pun">.</span><span class="typ">Submit</span><span class="pun">()).</span><span class="typ">Returns</span><span class="pun">(</span><span class="kwd">true</span><span class="pun">);</span><span class="pln"><br><br><br></span><span class="com">// implementing multiple interfaces in mock</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> foo </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">new</span><span class="pln"> </span><span class="typ">Mock</span><span class="pun">&lt;</span><span class="typ">IFoo</span><span class="pun">&gt;();</span><span class="pln"><br></span><span class="kwd">var</span><span class="pln"> disposableFoo </span><span class="pun">=</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">As</span><span class="pun">&lt;</span><span class="typ">IDisposable</span><span class="pun">&gt;();</span><span class="pln"><br></span><span class="com">// now the IFoo mock also implements IDisposable :)</span><span class="pln"><br>disposableFoo</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">df </span><span class="pun">=&gt;</span><span class="pln"> df</span><span class="pun">.</span><span class="typ">Dispose</span><span class="pun">());</span><span class="pln"><br><br><br></span><span class="com">// custom matchers</span><span class="pln"><br>mock</span><span class="pun">.</span><span class="typ">Setup</span><span class="pun">(</span><span class="pln">foo </span><span class="pun">=&gt;</span><span class="pln"> foo</span><span class="pun">.</span><span class="typ">Submit</span><span class="pun">(</span><span class="typ">IsLarge</span><span class="pun">())).</span><span class="typ">Throws</span><span class="pun">&lt;</span><span class="typ">ArgumentException</span><span class="pun">&gt;();</span><span class="pln"><br></span><span class="pun">...</span><span class="pln"><br></span><span class="kwd">public</span><span class="pln"> </span><span class="kwd">string</span><span class="pln"> </span><span class="typ">IsLarge</span><span class="pun">()</span><span class="pln"> <br></span><span class="pun">{</span><span class="pln"> <br>&nbsp; </span><span class="kwd">return</span><span class="pln"> </span><span class="typ">Match</span><span class="pun">&lt;</span><span class="kwd">string</span><span class="pun">&gt;.</span><span class="typ">Create</span><span class="pun">(</span><span class="pln">s </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">!</span><span class="typ">String</span><span class="pun">.</span><span class="typ">IsNullOrEmpty</span><span class="pun">(</span><span class="pln">s</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> s</span><span class="pun">.</span><span class="typ">Length</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">100</span><span class="pun">);</span><span class="pln"><br></span><span class="pun">}</span></a></pre><h1><a name="Read_more">Read more</a></h1><ul><li><a href="http://stephenwalther.com/blog/archive/2008/06/12/tdd-introduction-to-moq.aspx" rel="nofollow">TDD : Introduction to Moq</a> </li><li><a href="http://www.codethinked.com/post/2009/03/08/Beginning-Mocking-With-Moq-3-Part-1.aspx" rel="nofollow">Beginning Mocking With Moq 3 – Part 1</a> </li><li><a href="http://www.codethinked.com/post/2009/03/10/Beginning-Mocking-With-Moq-3-Part-2.aspx" rel="nofollow">Beginning Mocking With Moq 3 - Part 2</a> </li><li><a href="http://www.codethinked.com/post/2009/03/13/Beginning-Mocking-With-Moq-3-Part-3.aspx" rel="nofollow">Beginning Mocking With Moq 3 - Part 3</a> </li><li><a href="http://www.codethinked.com/post/2009/03/31/Beginning-Mocking-With-Moq-3-Part-4.aspx" rel="nofollow">Beginning Mocking With Moq 3 - Part 4</a> </li><li><a href="http://translate.google.com.ar/translate?u=http%3A%2F%2Fwww.gmbsg.com%2Fworks%2Findex.php%3Ftitle%3DUnit_Testing_Revisited_-_Die_Unit_Test_Evolution_mit_C-Sharp_3.0&amp;sl=de&amp;tl=en&amp;hl=es&amp;ie=UTF-8" rel="nofollow">Unit Testing Revisited - The evolution unit test with C-Sharp 3.0</a> (Google-translated) </li><li><a href="http://www.nixusg.com/post/2008/08/10/The-Automated-Testing-Continuum-Part-3-%28Moq%29.aspx" rel="nofollow">The automated testing continuum</a> </li><li><a href="http://www.emadibrahim.com/2008/04/04/unit-test-linq-to-sql-in-aspnet-mvc-with-moq/" rel="nofollow">Unit Test Linq to Sql in ASP.Net MVC with Moq</a> </li><li><a href="http://www.bestechvideos.com/2008/06/08/dimecasts-net-introduction-to-mocking-with-moq?query=moq+screencast" rel="nofollow">Introduction to Mocking with Moq (Video)</a> </li><li><a href="http://geekswithblogs.net/liammclennan/archive/2008/05/09/122007.aspx" rel="nofollow">Comparing Moq to Rhino Mocks</a> </li><li><a href="http://www.hanselman.com/blog/MoqLinqLambdasAndPredicatesAppliedToMockObjects.aspx" rel="nofollow">Moq: Linq, Lambdas and Predicates applied to Mock Objects</a> </li><li>[<a href="http://www.goneeded.com/javas/articles/20080324/a1811942466.html" rel="nofollow">http://www.goneeded.com/javas/articles/20080324/a1811942466.html</a>  </li><li><a href="http://weblogs.manas.com.ar/bcardiff/2009/02/reimproved-argument-matchers-in-moq/" rel="nofollow">Improved argument matchers in Moq</a> </li><li><a href="http://www.madprops.org/blog/moq-triqs-successive-expectations/" rel="nofollow">Moq Triqs - Successive Expectations</a> </li><li><a href="http://blog.decayingcode.com/2009/02/part-2-basic-of-mocking-with-moq.html" rel="nofollow">Basic Mocking with Moq</a> </li></ul><hr><p><strong>Note</strong>: when you need to pass the mock for consumption, you must use the <tt>mock.Object</tt> accessor as a consequence of a C# compiler restriction (vote to get it removed <a href="https://connect.microsoft.com/VisualStudio/feedback/ViewFeedback.aspx?FeedbackID=318122" rel="nofollow">at Microsoft Connect</a>) </p><p>Head on to the <a href="http://api.moq.me/" rel="nofollow">API documentation</a>, <a href="http://moq.me/get" rel="nofollow">download it</a> and have fun! Engage in the <a href="http://groups.google.com/group/moqdisc" rel="nofollow">discussion group</a> to give us feedback, share your experiences or wishes for vNext! </p>
 </td> 
 </tr>
 </tbody></table>
 </div>


 
 <br>
 <div id="commentlist">
 


 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 

<div class="collapse">


 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 

 
 <div class="artifactcomment">
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" href="http://code.google.com/u/david.kassa/">david.kassa</a>,
 
 </span>
 <span class="date" title="Mon Apr  6 12:57:51 2009">Apr 06, 2009</span>
 <div>
<div class="commentcontent">
<p>Is there a way to view the old 2.6 <a href="http://code.google.com/p/moq/wiki/QuickStart">QuickStart</a>? We haven't quite ported over and it's a nice reference. </p>
</div>
 
 
 </div>
 </div>
 

 
 <div class="artifactcomment">
 
 
 
 
 
 <span class="author">Comment
 
 by
 
 <a style="white-space: nowrap;" href="http://code.google.com/u/jcsston/">jcsston</a>,
 
 </span>
 <span class="date" title="Thu Apr  9 14:27:05 2009">Apr 09, 2009</span>
 <div>
<div class="commentcontent">
<p>It looks like you can see the old wiki pages in svn, <a href="http://code.google.com/p/moq/source/browse/wiki/QuickStart.wiki?r=477" rel="nofollow">http://code.google.com/p/moq/source/browse/wiki/QuickStart.wiki?r=477</a> </p>
</div>
 
 
 </div>
 </div>
 

</div>

 <script type="text/javascript">
 function delComment(sequence_num, delete_mode) {
 var f = document.forms["delcom"];
 f.sequence_num.value = sequence_num;
 f.mode.value = delete_mode;
 f.submit();
 return false;
 }
 </script>


 </div>
 
 
 
 
 
 <div id="commentform">
 <form action="../w/detail.do" method="post">
 <table>
 <tbody><tr><td class="vt">
 <input name="pagename" value="QuickStart" type="hidden">
 <input name="token" value="6a3eff9819faa1bafda5a175331f13f0" type="hidden">
 <div>Enter a comment:</div>
 <textarea name="content" rows="6" cols="80"></textarea><br><br>
 <input name="submit" value="Submit" type="submit">
 </td>
 <td class="vt">
 <div id="whb" class="tip" style="width: 15em;">
 <div class="round4"></div>
 <div class="round2"></div>
 <div class="round1"></div>
 <div class="box-inner closed" id="entrybubble">
 <a class="ifClosed" href="#whb" style="float: right;" onclick="_toggleHidden(this); document.getElementById('wikihelp').value='opened'">show</a>
 <a class="ifOpened" href="#whb" style="float: right;" onclick="_toggleHidden(this); document.getElementById('wikihelp').value='closed'">hide</a>
 <b>Wiki markup help</b>
 <div class="ifOpened">
 <div style="padding: 2px; font-size: 96%;">
 =Heading1=<br>
 ==Heading2==<br>
 ===Heading3===<br>
 <br>
 *bold* &nbsp; &nbsp;
 _italic_<br>
 `inline code`<br>
 escape: `*`<br>
 <br>
 Indent lists 2 spaces:<br>
 &nbsp;&nbsp;* bullet item<br>
 &nbsp;&nbsp;# numbered list<br>
 <br>
 {{{<br>
 verbatim code block<br>
 }}}<br>
 <br>
 Horizontal rule<br>
 ----
 <br>
 <br>
 WikiWordLink<br>
 [http://domain/page&nbsp;label]<br>
 http://domain/page<br>
 <br>
 || table || cells ||<br>
 
 </div><br>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new">More
 examples</a>
 <a href="http://code.google.com/p/support/wiki/WikiSyntax" target="new"><img src="QuickStart_files/tearoff_icon.gif" height="16" width="16"></a>
 </div>
 </div>
 <div class="round1"></div>
 <div class="round2"></div>
 <div class="round4"></div>
</div>
<input name="wikihelp" id="wikihelp" value="closed" type="hidden">

 </td></tr>
 </tbody></table>
 </form>
 </div>
 
 
 

<form name="delcom" action="../w/delComment.do" method="post">
 <input name="sequence_num" value="" type="hidden">
 <input name="mode" value="" type="hidden">
 <input name="pagename" value="QuickStart" type="hidden">
 <input name="token" value="6a3eff9819faa1bafda5a175331f13f0" type="hidden">
</form>



<script src="QuickStart_files/prettify.js"></script>
<script type="text/javascript">
 prettyPrint();
</script>
<script type="text/javascript" src="QuickStart_files/dit_scripts_20081013.js"></script>



  
 <script type="text/javascript" src="QuickStart_files/core_scripts_20081103.js"></script>
 
 
 
 
 
 </div>
<div id="footer" dir="ltr">
 
 <div class="text">
 
 ©2009 Google -
 <a href="http://code.google.com/">Code Home</a> -
 <a href="http://code.google.com/tos.html">Terms of Service</a> -
 <a href="http://www.google.com/privacy.html">Privacy Policy</a> -
 <a href="http://code.google.com/more/">Site Directory</a>
 
 </div>
</div>
<script type="text/javascript">
/**
 * Reports analytics.
 * It checks for the analytics functionality (window._gat) every 100ms
 * until the analytics script is fully loaded in order to invoke siteTracker.
 */
function _CS_reportAnalytics() {
 window.setTimeout(function() {
 if (window._gat) {
 var siteTracker = _gat._getTracker("UA-18071-1");
 siteTracker._initData();
 siteTracker._trackPageview();
 var projectTracker = _gat._getTracker("UA-3240245-1");
projectTracker._initData();
projectTracker._trackPageview();
 } else {
 _CS_reportAnalytics();
 }
 }, 100);
}
</script>

 
 
 <div class="hostedBy" style="margin-top: -20px;">
 <span style="vertical-align: top;">Hosted by</span>
 <a href="http://code.google.com/hosting/">
 <img src="QuickStart_files/google_code_tiny.gif" alt="Google Code" height="24" width="107">
 </a>
 </div>
 
 
 
 


 
 
 <script type="text/javascript">_CS_reportToCsi();</script>
 
 <div style="display: none;" class="menuDiv instance0"><div class="menuCategory controls"><hr class="menuSeparator"><a href="http://code.google.com/hosting/" style="display: block;" class="menuItem">Find or start a project...</a></div></div></body></html>